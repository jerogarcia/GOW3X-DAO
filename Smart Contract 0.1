use anchor_lang::prelude::*;
use anchor_spl::token::{self, Mint, Token, TokenAccount};

declare_id!("33jHEvVcDWDLBS8A59zTiQnXb5gA5eyBbrNJaqCE3U6X");

#[program]
pub mod gow3x {
    use super::*;

    pub fn initialize(ctx: Context<Initialize>, admin: Pubkey) -> Result<()> {
        let config = &mut ctx.accounts.config;
        config.admins = vec![admin];
        config.total_supply = 73_300_000_000; // 73.3M con 6 decimales
        config.reward_rate = 0;
        config.reserved_for_operations = 7_330_000_000; // 10% inicial reservado

        token::mint_to(
            CpiContext::new(
                ctx.accounts.token_program.to_account_info(),
                token::MintTo {
                    mint: ctx.accounts.mint.to_account_info(),
                    to: ctx.accounts.admin_token_account.to_account_info(),
                    authority: ctx.accounts.admin.to_account_info(),
                },
            ),
            config.total_supply,
        )?;
        Ok(())
    }

    pub fn distribute_gow_from_g2x<'a, 'b, 'c, 'info>(
        ctx: Context<'a, 'b, 'c, 'info, DistributeGow<'info>>,
        recipients: Vec<([u8; 20], Pubkey, u64)>,
    ) -> Result<()> {
        require!(
            ctx.accounts
                .config
                .admins
                .contains(&ctx.accounts.admin.key()),
            ErrorCode::Unauthorized
        );
        let recipient_accounts = &ctx.remaining_accounts;
        require!(
            recipients.len() == recipient_accounts.len(),
            ErrorCode::InvalidInput
        );

        // Get all accounts upfront to avoid borrowing issues
        let admin_token_account_info = ctx.accounts.admin_token_account.to_account_info();
        let admin_info = ctx.accounts.admin.to_account_info();
        let token_program_info = ctx.accounts.token_program.to_account_info();

        for (i, (_eth_address, solana_address, amount)) in recipients.iter().enumerate() {
            // Extract the account info for the recipient
            let recipient_info = &recipient_accounts[i];

            // Validate the recipient account without using Account::try_from
            let recipient_account_data =
                TokenAccount::try_deserialize(&mut &recipient_info.data.borrow()[..])?;
            require!(
                recipient_account_data.owner == *solana_address,
                ErrorCode::InvalidRecipient
            );

            // Create a new CPI context for each transfer
            token::transfer(
                CpiContext::new(
                    token_program_info.clone(),
                    token::Transfer {
                        from: admin_token_account_info.clone(),
                        to: recipient_info.clone(),
                        authority: admin_info.clone(),
                    },
                ),
                *amount,
            )?;
        }
        Ok(())
    }

    pub fn setup_vesting(
        ctx: Context<SetupVesting>,
        recipient: Pubkey,
        amount: u64,
        milestones: Vec<(i64, u64)>,
        is_auto_release: bool,
    ) -> Result<()> {
        require!(
            ctx.accounts
                .config
                .admins
                .contains(&ctx.accounts.admin.key()),
            ErrorCode::Unauthorized
        );
        require!(amount > 0, ErrorCode::InvalidAmount);
        require!(
            milestones.windows(2).all(|w| w[0].0 <= w[1].0),
            ErrorCode::InvalidMilestones
        );

        let vesting_schedule = &mut ctx.accounts.vesting_schedule;
        vesting_schedule.recipient = recipient;
        vesting_schedule.total_amount = amount;
        vesting_schedule.milestones = milestones.clone();
        vesting_schedule.released = 0;
        vesting_schedule.is_auto_release = is_auto_release;
        vesting_schedule.released_per_milestone = vec![0; milestones.len()];

        token::transfer(
            CpiContext::new(
                ctx.accounts.token_program.to_account_info(),
                token::Transfer {
                    from: ctx.accounts.admin_token_account.to_account_info(),
                    to: ctx.accounts.vesting_token_account.to_account_info(),
                    authority: ctx.accounts.admin.to_account_info(),
                },
            ),
            amount,
        )?;
        Ok(())
    }

    pub fn release_vesting(ctx: Context<ReleaseVesting>) -> Result<()> {
        let vesting_schedule = &mut ctx.accounts.vesting_schedule;
        require!(
            vesting_schedule.is_auto_release,
            ErrorCode::ManualReleaseOnly
        );

        let current_time = Clock::get()?.unix_timestamp;

        // Clonamos los datos necesarios para evitar problemas de borrow
        let milestones = vesting_schedule.milestones.clone();
        let total_amount = vesting_schedule.total_amount;

        // C치lculo directo en lugar de llamar a la funci칩n externa
        let mut amount_to_release = 0;
        for (i, (timestamp, amount)) in milestones.iter().enumerate() {
            if current_time >= *timestamp && vesting_schedule.released < total_amount {
                let unreleased = amount.saturating_sub(vesting_schedule.released_per_milestone[i]);
                amount_to_release += unreleased;
                vesting_schedule.released_per_milestone[i] = *amount;
            }
        }
        vesting_schedule.released += amount_to_release;

        require!(amount_to_release > 0, ErrorCode::NothingToClaim);
        let seeds = &[
            b"vesting",
            vesting_schedule.recipient.as_ref(),
            &[ctx.bumps.vesting_authority],
        ];
        token::transfer(
            CpiContext::new_with_signer(
                ctx.accounts.token_program.to_account_info(),
                token::Transfer {
                    from: ctx.accounts.vesting_token_account.to_account_info(),
                    to: ctx.accounts.recipient_token_account.to_account_info(),
                    authority: ctx.accounts.vesting_authority.to_account_info(),
                },
                &[&seeds[..]],
            ),
            amount_to_release,
        )?;
        Ok(())
    }

    pub fn claim_vested_tokens(ctx: Context<ClaimVestedTokens>) -> Result<()> {
        let vesting_schedule = &mut ctx.accounts.vesting_schedule;
        require!(
            !vesting_schedule.is_auto_release,
            ErrorCode::AutoReleaseOnly
        );
        require!(
            vesting_schedule.recipient == ctx.accounts.recipient.key(),
            ErrorCode::Unauthorized
        );

        let current_time = Clock::get()?.unix_timestamp;

        // Clonamos los datos necesarios para evitar problemas de borrow
        let milestones = vesting_schedule.milestones.clone();
        let total_amount = vesting_schedule.total_amount;

        // C치lculo directo en lugar de llamar a la funci칩n externa
        let mut amount_to_release = 0;
        for (i, (timestamp, amount)) in milestones.iter().enumerate() {
            if current_time >= *timestamp && vesting_schedule.released < total_amount {
                let unreleased = amount.saturating_sub(vesting_schedule.released_per_milestone[i]);
                amount_to_release += unreleased;
                vesting_schedule.released_per_milestone[i] = *amount;
            }
        }
        vesting_schedule.released += amount_to_release;

        require!(amount_to_release > 0, ErrorCode::NothingToClaim);
        let seeds = &[
            b"vesting",
            vesting_schedule.recipient.as_ref(),
            &[ctx.bumps.vesting_authority],
        ];
        token::transfer(
            CpiContext::new_with_signer(
                ctx.accounts.token_program.to_account_info(),
                token::Transfer {
                    from: ctx.accounts.vesting_token_account.to_account_info(),
                    to: ctx.accounts.recipient_token_account.to_account_info(),
                    authority: ctx.accounts.vesting_authority.to_account_info(),
                },
                &[&seeds[..]],
            ),
            amount_to_release,
        )?;
        Ok(())
    }

    pub fn update_admins(ctx: Context<UpdateAdmins>, new_admins: Vec<Pubkey>) -> Result<()> {
        require!(
            ctx.accounts
                .config
                .admins
                .contains(&ctx.accounts.admin.key()),
            ErrorCode::Unauthorized
        );
        require!(!new_admins.is_empty(), ErrorCode::MustHaveAdmin);
        ctx.accounts.config.admins = new_admins;
        Ok(())
    }

    pub fn burn_tokens(ctx: Context<BurnTokens>, amount: u64) -> Result<()> {
        require!(
            ctx.accounts
                .config
                .admins
                .contains(&ctx.accounts.admin.key()),
            ErrorCode::Unauthorized
        );
        let current_balance = ctx.accounts.admin_token_account.amount;
        require!(current_balance >= amount, ErrorCode::InsufficientBalance);
        let reserved = ctx.accounts.config.reserved_for_operations;
        require!(
            current_balance - amount >= reserved,
            ErrorCode::InsufficientReserve
        );
        require!(
            current_balance - amount >= ctx.accounts.config.total_supply / 100,
            ErrorCode::BurnLimitExceeded
        );

        token::burn(
            CpiContext::new(
                ctx.accounts.token_program.to_account_info(),
                token::Burn {
                    mint: ctx.accounts.mint.to_account_info(),
                    from: ctx.accounts.admin_token_account.to_account_info(),
                    authority: ctx.accounts.admin.to_account_info(),
                },
            ),
            amount,
        )?;
        Ok(())
    }

    pub fn start_staking(ctx: Context<StartStaking>, amount: u64) -> Result<()> {
        let stake = &mut ctx.accounts.stake;
        stake.owner = ctx.accounts.user.key();
        stake.amount = amount;
        stake.start_time = Clock::get()?.unix_timestamp;
        token::transfer(
            CpiContext::new(
                ctx.accounts.token_program.to_account_info(),
                token::Transfer {
                    from: ctx.accounts.user_token_account.to_account_info(),
                    to: ctx.accounts.stake_token_account.to_account_info(),
                    authority: ctx.accounts.user.to_account_info(),
                },
            ),
            amount,
        )?;
        Ok(())
    }

    pub fn unstake(ctx: Context<Unstake>) -> Result<()> {
        let stake = &mut ctx.accounts.stake;
        let config = &ctx.accounts.config;
        let current_time = Clock::get()?.unix_timestamp;
        let elapsed = current_time - stake.start_time;
        let min_lock_time = 30 * 24 * 60 * 60;
        let reward_rate = config.reward_rate;

        let mut amount_to_return = stake.amount;
        if elapsed < min_lock_time {
            let penalty = stake.amount / 10;
            amount_to_return -= penalty;
        }
        let rewards = (elapsed as u64) * reward_rate;
        amount_to_return += rewards;

        // Get token program info upfront
        let token_program_info = ctx.accounts.token_program.to_account_info();
        let owner_token_account_info = ctx.accounts.owner_token_account.to_account_info();

        // Process stake part
        let stake_token_account_info = ctx.accounts.stake_token_account.to_account_info();
        let stake_authority_info = ctx.accounts.stake_authority.to_account_info();

        let stake_seeds = &[b"stake", stake.owner.as_ref(), &[ctx.bumps.stake_authority]];

        token::transfer(
            CpiContext::new_with_signer(
                token_program_info.clone(),
                token::Transfer {
                    from: stake_token_account_info,
                    to: owner_token_account_info.clone(),
                    authority: stake_authority_info,
                },
                &[&stake_seeds[..]],
            ),
            amount_to_return,
        )?;
        stake.amount = 0;

        // Gestionar el vesting opcional
        if let (Some(vesting_schedule), Some(vesting_token_account), Some(vesting_authority)) = (
            ctx.accounts.vesting_schedule.as_mut(),
            &ctx.accounts.vesting_token_account,
            &ctx.accounts.vesting_authority,
        ) {
            if vesting_schedule.is_auto_release
                && current_time >= stake.start_time + min_lock_time as i64
            {
                // Clonar datos para evitar problemas de borrow
                let milestones = vesting_schedule.milestones.clone();
                let total_amount = vesting_schedule.total_amount;

                // C치lculo directo
                let mut amount_to_release = 0;
                for (i, (timestamp, amount)) in milestones.iter().enumerate() {
                    if current_time >= *timestamp && vesting_schedule.released < total_amount {
                        let unreleased =
                            amount.saturating_sub(vesting_schedule.released_per_milestone[i]);
                        amount_to_release += unreleased;
                        vesting_schedule.released_per_milestone[i] = *amount;
                    }
                }
                vesting_schedule.released += amount_to_release;

                if amount_to_release > 0 {
                    let vesting_seeds = &[
                        b"vesting",
                        vesting_schedule.recipient.as_ref(),
                        &[ctx.bumps.vesting_authority],
                    ];

                    let vesting_token_account_info = vesting_token_account.to_account_info();
                    let vesting_authority_info = vesting_authority.to_account_info();

                    token::transfer(
                        CpiContext::new_with_signer(
                            token_program_info,
                            token::Transfer {
                                from: vesting_token_account_info,
                                to: owner_token_account_info,
                                authority: vesting_authority_info,
                            },
                            &[&vesting_seeds[..]],
                        ),
                        amount_to_release,
                    )?;
                }
            }
        }
        Ok(())
    }

    pub fn set_reward_rate(ctx: Context<SetRewardRate>, rate: u64) -> Result<()> {
        require!(
            ctx.accounts
                .config
                .admins
                .contains(&ctx.accounts.admin.key()),
            ErrorCode::Unauthorized
        );
        ctx.accounts.config.reward_rate = rate;
        Ok(())
    }
}

// Funci칩n de utilidad para calcular la liberaci칩n de tokens (ahora solo como referencia)
pub fn calculate_vesting_release(
    milestones: &Vec<(i64, u64)>,
    released_per_milestone: &mut Vec<u64>,
    released: &mut u64,
    total_amount: u64,
    current_time: i64,
) -> u64 {
    let mut amount_to_release = 0;
    for (i, (timestamp, amount)) in milestones.iter().enumerate() {
        if current_time >= *timestamp && *released < total_amount {
            let unreleased = amount.saturating_sub(released_per_milestone[i]);
            amount_to_release += unreleased;
            released_per_milestone[i] = *amount;
        }
    }
    *released += amount_to_release;
    amount_to_release
}

#[derive(Accounts)]
pub struct Initialize<'info> {
    #[account(init, payer = admin, space = 8 + 1024)]
    pub config: Account<'info, DaoConfig>,
    #[account(mut, signer)]
    pub admin: Signer<'info>,
    #[account(mut)]
    pub mint: Account<'info, Mint>,
    #[account(mut)]
    pub admin_token_account: Account<'info, TokenAccount>,
    pub token_program: Program<'info, Token>,
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct DistributeGow<'info> {
    #[account(mut)]
    pub config: Account<'info, DaoConfig>,
    #[account(signer)]
    pub admin: Signer<'info>,
    #[account(mut)]
    pub admin_token_account: Account<'info, TokenAccount>,
    pub token_program: Program<'info, Token>,
}

#[derive(Accounts)]
pub struct SetupVesting<'info> {
    #[account(mut)]
    pub config: Account<'info, DaoConfig>,
    #[account(mut, signer)]
    pub admin: Signer<'info>,
    #[account(mut)]
    pub admin_token_account: Account<'info, TokenAccount>,
    #[account(
        init,
        payer = admin,
        space = 8 + 512,
        seeds = [b"vesting", recipient.key().as_ref()],
        bump
    )]
    pub vesting_schedule: Account<'info, VestingSchedule>,
    /// Se inicializa la cuenta de tokens del vesting
    #[account(mut, seeds = [b"vesting", recipient.key().as_ref()], bump)]
    pub vesting_token_account: Account<'info, TokenAccount>,
    pub token_program: Program<'info, Token>,
    pub system_program: Program<'info, System>,
    /// CHECK: Solo para derivar la PDA
    pub recipient: UncheckedAccount<'info>,
}

#[derive(Accounts)]
pub struct ReleaseVesting<'info> {
    #[account(mut, seeds = [b"vesting", vesting_schedule.recipient.as_ref()], bump)]
    pub vesting_schedule: Account<'info, VestingSchedule>,
    #[account(mut, seeds = [b"vesting", vesting_schedule.recipient.as_ref()], bump)]
    pub vesting_token_account: Account<'info, TokenAccount>,
    #[account(mut)]
    pub recipient_token_account: Account<'info, TokenAccount>,
    /// CHECK: PDA como autoridad
    #[account(seeds = [b"vesting", vesting_schedule.recipient.as_ref()], bump)]
    pub vesting_authority: AccountInfo<'info>,
    pub token_program: Program<'info, Token>,
}

#[derive(Accounts)]
pub struct ClaimVestedTokens<'info> {
    #[account(mut, seeds = [b"vesting", vesting_schedule.recipient.as_ref()], bump)]
    pub vesting_schedule: Account<'info, VestingSchedule>,
    #[account(mut, seeds = [b"vesting", vesting_schedule.recipient.as_ref()], bump)]
    pub vesting_token_account: Account<'info, TokenAccount>,
    #[account(mut)]
    pub recipient_token_account: Account<'info, TokenAccount>,
    #[account(signer)]
    pub recipient: Signer<'info>,
    /// CHECK: PDA como autoridad
    #[account(seeds = [b"vesting", vesting_schedule.recipient.as_ref()], bump)]
    pub vesting_authority: AccountInfo<'info>,
    pub token_program: Program<'info, Token>,
}

#[derive(Accounts)]
pub struct UpdateAdmins<'info> {
    #[account(mut)]
    pub config: Account<'info, DaoConfig>,
    #[account(signer)]
    pub admin: Signer<'info>,
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct BurnTokens<'info> {
    #[account(mut)]
    pub config: Account<'info, DaoConfig>,
    #[account(signer)]
    pub admin: Signer<'info>,
    #[account(mut)]
    pub admin_token_account: Account<'info, TokenAccount>,
    #[account(mut)]
    pub mint: Account<'info, Mint>,
    pub token_program: Program<'info, Token>,
}

#[derive(Accounts)]
pub struct StartStaking<'info> {
    #[account(init, payer = user, space = 8 + 56, seeds = [b"stake", user.key().as_ref()], bump)]
    pub stake: Account<'info, Stake>,
    #[account(mut, signer)]
    pub user: Signer<'info>,
    #[account(mut)]
    pub user_token_account: Account<'info, TokenAccount>,
    #[account(mut, seeds = [b"stake", user.key().as_ref()], bump)]
    pub stake_token_account: Account<'info, TokenAccount>,
    pub token_program: Program<'info, Token>,
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct Unstake<'info> {
    #[account(mut)]
    pub config: Account<'info, DaoConfig>,
    #[account(mut, seeds = [b"stake", owner.key().as_ref()], bump)]
    pub stake: Account<'info, Stake>,
    #[account(mut, seeds = [b"stake", owner.key().as_ref()], bump)]
    pub stake_token_account: Account<'info, TokenAccount>,
    #[account(mut)]
    pub owner_token_account: Account<'info, TokenAccount>,
    #[account(signer)]
    pub owner: Signer<'info>,
    #[account(mut, seeds = [b"vesting", owner.key().as_ref()], bump)]
    pub vesting_schedule: Option<Account<'info, VestingSchedule>>,
    #[account(mut, seeds = [b"vesting", owner.key().as_ref()], bump)]
    pub vesting_token_account: Option<Account<'info, TokenAccount>>,
    /// CHECK: PDA como autoridad para stake
    #[account(seeds = [b"stake", owner.key().as_ref()], bump)]
    pub stake_authority: AccountInfo<'info>,
    /// CHECK: PDA como autoridad para vesting (opcional)
    #[account(seeds = [b"vesting", owner.key().as_ref()], bump)]
    pub vesting_authority: Option<AccountInfo<'info>>,
    pub token_program: Program<'info, Token>,
}

#[derive(Accounts)]
pub struct SetRewardRate<'info> {
    #[account(mut)]
    pub config: Account<'info, DaoConfig>,
    #[account(signer)]
    pub admin: Signer<'info>,
}

#[account]
pub struct DaoConfig {
    pub admins: Vec<Pubkey>,
    pub total_supply: u64,
    pub reward_rate: u64,
    pub reserved_for_operations: u64,
}

#[account]
pub struct VestingSchedule {
    pub recipient: Pubkey,
    pub total_amount: u64,
    pub milestones: Vec<(i64, u64)>,
    pub released: u64,
    pub is_auto_release: bool,
    pub released_per_milestone: Vec<u64>,
}

#[account]
pub struct Stake {
    pub owner: Pubkey,
    pub amount: u64,
    pub start_time: i64,
}

#[error_code]
pub enum ErrorCode {
    #[msg("No est치s autorizado para realizar esta acci칩n")]
    Unauthorized,
    #[msg("Entrada inv치lida")]
    InvalidInput,
    #[msg("Los hitos deben estar ordenados cronol칩gicamente")]
    InvalidMilestones,
    #[msg("L칤mite de quema excedido")]
    BurnLimitExceeded,
    #[msg("Nada que reclamar")]
    NothingToClaim,
    #[msg("Destinatario inv치lido")]
    InvalidRecipient,
    #[msg("Solo liberaci칩n manual permitida")]
    AutoReleaseOnly,
    #[msg("Solo liberaci칩n autom치tica permitida")]
    ManualReleaseOnly,
    #[msg("Reserva insuficiente para operaciones")]
    InsufficientReserve,
    #[msg("Cantidad inv치lida")]
    InvalidAmount,
    #[msg("Debe haber al menos un administrador")]
    MustHaveAdmin,
    #[msg("Balance insuficiente")]
    InsufficientBalance,
}
